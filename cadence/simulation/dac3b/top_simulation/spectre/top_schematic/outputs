_outputList = nil
 _envSaveOptions = nil
savedComponent = (let
(tmp1 tmp2 tmp3 tmp4 tmp5 tmp6 tmp7 tmp8 tmp9)
(unless tmp1
tmp1 = make_sevOutputStruct()
)
(unless tmp1
tmp1 = (ncons nil)
)
tmp1->inLastSet = nil
tmp1->name = nil
tmp1->expression = nil
tmp1->signal = "/opamp_out"
tmp1->type = 'net
tmp1->selectionDetail = (let
(tmp1)
tmp1 = (let
(tmp1 tmp2)
tmp1 = 'color
tmp2 = (let
(tmp1 tmp2)
tmp1 = "y8"
tmp2 = "drawing"
list(tmp1 tmp2)
)
list(tmp1 tmp2)
)
list(tmp1)
)
tmp1->value = nil
tmp1->plot = 't
tmp1->save = nil
tmp1->march = nil
tmp1->index = 1
(unless tmp2
tmp2 = make_sevOutputStruct()
)
(unless tmp2
tmp2 = (ncons nil)
)
tmp2->inLastSet = nil
tmp2->name = nil
tmp2->expression = nil
tmp2->signal = "/V4/PLUS"
tmp2->type = 'terminal
tmp2->selectionDetail = (let
(tmp1)
tmp1 = (let
(tmp1 tmp2)
tmp1 = 'color
tmp2 = (let
(tmp1 tmp2)
tmp1 = "y5"
tmp2 = "drawing"
list(tmp1 tmp2)
)
list(tmp1 tmp2)
)
list(tmp1)
)
tmp2->value = nil
tmp2->plot = nil
tmp2->save = 't
tmp2->march = nil
tmp2->index = 2
(unless tmp3
tmp3 = make_sevOutputStruct()
)
(unless tmp3
tmp3 = (ncons nil)
)
tmp3->inLastSet = nil
tmp3->name = nil
tmp3->expression = nil
tmp3->signal = "/V6/PLUS"
tmp3->type = 'terminal
tmp3->selectionDetail = (let
(tmp1)
tmp1 = (let
(tmp1 tmp2)
tmp1 = 'color
tmp2 = (let
(tmp1 tmp2)
tmp1 = "y7"
tmp2 = "drawing"
list(tmp1 tmp2)
)
list(tmp1 tmp2)
)
list(tmp1)
)
tmp3->value = nil
tmp3->plot = nil
tmp3->save = 't
tmp3->march = nil
tmp3->index = 3
(unless tmp4
tmp4 = make_sevOutputStruct()
)
(unless tmp4
tmp4 = (ncons nil)
)
tmp4->inLastSet = nil
tmp4->name = nil
tmp4->expression = nil
tmp4->signal = "/V5/PLUS"
tmp4->type = 'terminal
tmp4->selectionDetail = (let
(tmp1)
tmp1 = (let
(tmp1 tmp2)
tmp1 = 'color
tmp2 = (let
(tmp1 tmp2)
tmp1 = "y9"
tmp2 = "drawing"
list(tmp1 tmp2)
)
list(tmp1 tmp2)
)
list(tmp1)
)
tmp4->value = nil
tmp4->plot = nil
tmp4->save = 't
tmp4->march = nil
tmp4->index = 4
(unless tmp5
tmp5 = make_sevOutputStruct()
)
(unless tmp5
tmp5 = (ncons nil)
)
tmp5->inLastSet = nil
tmp5->name = nil
tmp5->expression = nil
tmp5->signal = "/V3/PLUS"
tmp5->type = 'terminal
tmp5->selectionDetail = (let
(tmp1)
tmp1 = (let
(tmp1 tmp2)
tmp1 = 'color
tmp2 = (let
(tmp1 tmp2)
tmp1 = "y2"
tmp2 = "drawing"
list(tmp1 tmp2)
)
list(tmp1 tmp2)
)
list(tmp1)
)
tmp5->value = nil
tmp5->plot = nil
tmp5->save = 't
tmp5->march = nil
tmp5->index = 5
(unless tmp6
tmp6 = make_sevOutputStruct()
)
(unless tmp6
tmp6 = (ncons nil)
)
tmp6->inLastSet = nil
tmp6->name = nil
tmp6->expression = nil
tmp6->signal = "/V2/PLUS"
tmp6->type = 'terminal
tmp6->selectionDetail = (let
(tmp1)
tmp1 = (let
(tmp1 tmp2)
tmp1 = 'color
tmp2 = (let
(tmp1 tmp2)
tmp1 = "y4"
tmp2 = "drawing"
list(tmp1 tmp2)
)
list(tmp1 tmp2)
)
list(tmp1)
)
tmp6->value = nil
tmp6->plot = nil
tmp6->save = 't
tmp6->march = nil
tmp6->index = 6
(unless tmp7
tmp7 = make_sevOutputStruct()
)
(unless tmp7
tmp7 = (ncons nil)
)
tmp7->inLastSet = nil
tmp7->name = nil
tmp7->expression = nil
tmp7->signal = "/V1/PLUS"
tmp7->type = 'terminal
tmp7->selectionDetail = (let
(tmp1)
tmp1 = (let
(tmp1 tmp2)
tmp1 = 'color
tmp2 = (let
(tmp1 tmp2)
tmp1 = "y6"
tmp2 = "drawing"
list(tmp1 tmp2)
)
list(tmp1 tmp2)
)
list(tmp1)
)
tmp7->value = nil
tmp7->plot = nil
tmp7->save = 't
tmp7->march = nil
tmp7->index = 7
(unless tmp8
tmp8 = make_sevOutputStruct()
)
(unless tmp8
tmp8 = (ncons nil)
)
tmp8->inLastSet = nil
tmp8->name = nil
tmp8->expression = nil
tmp8->signal = "/V0/PLUS"
tmp8->type = 'terminal
tmp8->selectionDetail = (let
(tmp1)
tmp1 = (let
(tmp1 tmp2)
tmp1 = 'color
tmp2 = (let
(tmp1 tmp2)
tmp1 = "y8"
tmp2 = "drawing"
list(tmp1 tmp2)
)
list(tmp1 tmp2)
)
list(tmp1)
)
tmp8->value = nil
tmp8->plot = nil
tmp8->save = 't
tmp8->march = nil
tmp8->index = 8
(unless tmp9
tmp9 = make_sevOutputStruct()
)
(unless tmp9
tmp9 = (ncons nil)
)
tmp9->name = "power"
tmp9->expression = (let
(tmp1 tmp2)
tmp1 = 'abs
tmp2 = (let
(tmp1 tmp2 tmp3)
tmp1 = 'times
tmp2 = 1.2000000000000000e+00
tmp3 = (let
(tmp1 tmp2 tmp3)
tmp1 = 'plus
tmp2 = (let
(tmp1 tmp2)
tmp1 = 'IT
tmp2 = "/V4/PLUS"
list(tmp1 tmp2)
)
tmp3 = (let
(tmp1 tmp2 tmp3 tmp4 tmp5)
tmp1 = 'plus
tmp2 = (let
(tmp1 tmp2)
tmp1 = 'IT
tmp2 = "/V3/PLUS"
list(tmp1 tmp2)
)
tmp3 = (let
(tmp1 tmp2 tmp3)
tmp1 = 'plus
tmp2 = (let
(tmp1 tmp2)
tmp1 = 'IT
tmp2 = "/V2/PLUS"
list(tmp1 tmp2)
)
tmp3 = (let
(tmp1 tmp2 tmp3)
tmp1 = 'plus
tmp2 = (let
(tmp1 tmp2)
tmp1 = 'IT
tmp2 = "/V1/PLUS"
list(tmp1 tmp2)
)
tmp3 = (let
(tmp1 tmp2)
tmp1 = 'IT
tmp2 = "/V0/PLUS"
list(tmp1 tmp2)
)
list(tmp1 tmp2 tmp3)
)
list(tmp1 tmp2 tmp3)
)
tmp4 = (let
(tmp1 tmp2 tmp3)
tmp1 = 'times
tmp2 = 2.9999999999999999e-01
tmp3 = (let
(tmp1 tmp2)
tmp1 = 'IT
tmp2 = "/V6/PLUS"
list(tmp1 tmp2)
)
list(tmp1 tmp2 tmp3)
)
tmp5 = (let
(tmp1 tmp2 tmp3)
tmp1 = 'times
tmp2 = 9.0000000000000002e-01
tmp3 = (let
(tmp1 tmp2)
tmp1 = 'IT
tmp2 = "/V5/PLUS"
list(tmp1 tmp2)
)
list(tmp1 tmp2 tmp3)
)
list(tmp1 tmp2 tmp3 tmp4 tmp5)
)
list(tmp1 tmp2 tmp3)
)
list(tmp1 tmp2 tmp3)
)
list(tmp1 tmp2)
)
tmp9->signal = nil
tmp9->type = nil
tmp9->selectionDetail = nil
tmp9->value = nil
tmp9->plot = 't
tmp9->save = nil
tmp9->march = nil
tmp9->index = 9
list(tmp1 tmp2 tmp3 tmp4 tmp5 tmp6 tmp7 tmp8 tmp9)
)
_outputList = nconc( _outputList savedComponent) 
_envSaveOptions = (let
(tmp1 tmp2 tmp3 tmp4 tmp5 tmp6 tmp7 tmp8 tmp9 tmp10 tmp11 tmp12 tmp13 tmp14 tmp15 tmp16)
tmp1 = (let
(tmp1 tmp2)
tmp1 = 'assertsInfo
list(tmp1 tmp2)
)
tmp2 = (let
(tmp1 tmp2)
tmp1 = 'subcktsInfo
tmp2 = 't
list(tmp1 tmp2)
)
tmp3 = (let
(tmp1 tmp2)
tmp1 = 'primitivesInfo
tmp2 = 't
list(tmp1 tmp2)
)
tmp4 = (let
(tmp1 tmp2)
tmp1 = 'outputParamInfo
tmp2 = 't
list(tmp1 tmp2)
)
tmp5 = (let
(tmp1 tmp2)
tmp1 = 'elementInfo
tmp2 = 't
list(tmp1 tmp2)
)
tmp6 = (let
(tmp1 tmp2)
tmp1 = 'modelParamInfo
tmp2 = 't
list(tmp1 tmp2)
)
tmp7 = (let
(tmp1 tmp2)
tmp1 = 'separator3
tmp2 = ""
list(tmp1 tmp2)
)
tmp8 = (let
(tmp1 tmp2)
tmp1 = 'saveahdlvars
tmp2 = ""
list(tmp1 tmp2)
)
tmp9 = (let
(tmp1 tmp2)
tmp1 = 'separator2
tmp2 = ""
list(tmp1 tmp2)
)
tmp10 = (let
(tmp1 tmp2)
tmp1 = 'useprobes
tmp2 = ""
list(tmp1 tmp2)
)
tmp11 = (let
(tmp1 tmp2)
tmp1 = 'subcktprobelvl
tmp2 = ""
list(tmp1 tmp2)
)
tmp12 = (let
(tmp1 tmp2)
tmp1 = 'currents
tmp2 = ""
list(tmp1 tmp2)
)
tmp13 = (let
(tmp1 tmp2)
tmp1 = 'separator1
tmp2 = ""
list(tmp1 tmp2)
)
tmp14 = (let
(tmp1 tmp2)
tmp1 = 'nestlvl
tmp2 = ""
list(tmp1 tmp2)
)
tmp15 = (let
(tmp1 tmp2)
tmp1 = 'pwr
tmp2 = ""
list(tmp1 tmp2)
)
tmp16 = (let
(tmp1 tmp2)
tmp1 = 'save
tmp2 = "allpub"
list(tmp1 tmp2)
)
list(tmp1 tmp2 tmp3 tmp4 tmp5 tmp6 tmp7 tmp8 tmp9 tmp10 tmp11 tmp12 tmp13 tmp14 tmp15 tmp16)
)
savedComponent = list( _outputList _envSaveOptions ) 
_outputList = 'unbound
 _envSaveOptions = 'unbound
